Description
Given n pieces of wood with length L[i] (integer array). Cut them into small pieces to guarantee you could have equal or
more than k pieces with the same length. What is the longest length you can get from the n pieces of wood? Given L & k, 
return the maximum length of the small pieces.

public class Solution {
    /**
     * @param l: Given n pieces of wood with length L[i]
     * @param k: An integer
     * @return: The maximum length of the small pieces
     */
    public int woodCut(int[] l, int k) {
        // write your code here
        if (l == null || l.length == 0) {
            return 0;
        }

        int start = 0, maxLength = 0;
        long sum = 0;
        for (int i: l) {
             maxLength = Math.max(maxLength, i);
             sum += i;
        }
        int end = (int)Math.min(maxLength, sum / k);

        if (end < 1) {
            return 0;
        }

        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (calPieces(l, mid) >= k) {
                start = mid;
            } else {
                end = mid;
            }
        }
        return calPieces(l, end) >= k ? end : start;
    }
    private int calPieces(int[] l, int length) {
        int count = 0;
        for (int i: l) {
            count += i / length;
        }
        return count;
    }
}
