1. brute force
class Solution {
    public String longestPalindrome(String s) {
        if(s == null) {
            return null;
        }
        
        for(int length = s.length(); length > 0; length--){
            for(int start = 0; start + length <= s.length(); start++){
                if(isPalindrome(s, start, start + length -1)){
                    return s.substring(start, start + length);
                }
            }
        }
        return "";
        
    }
    
    private boolean isPalindrome(String s, int left, int right){
        while(left < right && s.charAt(left) == s.charAt(right)){
            left++;
            right--;
        }
        return left >= right;
    }
}

2. Span from the center
class Solution {
    public String longestPalindrome(String s) {
        if(s == null) {
            return null;
        }
        
    String longest = "";
    for(int start = 0; start < s.length(); start++){
        String currentPalindromeOdd = expandFromCenter(s, start, start);
            if(currentPalindromeOdd.length() >= longest.length()){
                longest = currentPalindromeOdd;
            }
        String currentPalindromeEven = expandFromCenter(s, start, start + 1);
            if(currentPalindromeEven.length() >= longest.length()){
                longest = currentPalindromeEven;
            }
    }
        return longest;
    }
    
        
    private String expandFromCenter(String s, int left, int right){
        while(left >= 0 && right < s.length()){
            if(s.charAt(left) != s.charAt(right)){
                break;
            }
            left--;
            right++;            
        }
        return s.substring(left + 1, right);
    }
        
        
}

3. dymamic programming
class Solution {
    public String longestPalindrome(String s) {
        if (s == null) {
            return null;
        }
    
        int n = s.length();
        boolean [][] isPalindrome = new boolean[n][n];
        
        int longest = 1;
        int start = 0;
        
        for (int i = 0; i < n; i++) {
            isPalindrome[i][i] = true;
        }
        for (int i = 0; i < n - 1; i++) {
            isPalindrome[i][i + 1] = s.charAt(i) == s.charAt(i + 1);
            if(isPalindrome[i][i + 1]){
                start = i;
                longest = 2;
            }          
        }
        for (int i = n - 3; i >= 0; i--) {
            for (int j = i + 2; j < n; j++) {
                isPalindrome[i][j] = s.charAt(i) == s.charAt(j) && isPalindrome[i + 1][j - 1];
                if(isPalindrome[i][j] && j - i + 1 > longest) {
                    start = i;
                    longest = j - i + 1;
                }
                    
            }
        }
        
        return s.substring(start, start + longest);
    

    }
              
}
