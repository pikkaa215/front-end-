Description
Given target, a non-negative integer k and an integer array A sorted in ascending order, find the k closest numbers to target in A, sorted in ascending order by the difference between the number and target. Otherwise, sorted in ascending order by number if the difference is same.

public class Solution {
    /**
     * @param a: an integer array
     * @param target: An integer
     * @param k: An integer
     * @return: an integer array
     */
    public int[] kClosestNumbers(int[] a, int target, int k) {
        // write your code here
        if (a.length == 0) {
            return null;
        }
        int left = findLowerClosest(a, 0, a.length - 1, target);
        int right = left + 1;
        int[] res = new int[k];
        for (int i = 0; i < k; i++) {
            if (leftCloser(a, left, right, target)) {
                res[i] = a[left];
                left--;
            } else {
                res[i] = a[right];
                right++;
            }
        }
        return res;
        
    }

    private boolean leftCloser(int[] a, int left, int right, int target) {
        if (left < 0) {
            return false;
        }
        if (right > a.length - 1) {
            return true;
        }
        return (target - a[left] <= a[right] - target);
        
       
    }

    private int findLowerClosest(int[] a, int start, int end, int target) {
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (a[mid] >= target) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (a[end] < target) {
            return end;
        }
        if (a[start] < target) {
            return start;
        }
        return -1;
    }
}
