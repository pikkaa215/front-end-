Description
Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Find the number of islands.


class Coordinate {
    int x;
    int y;
    
    public Coordinate(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    public int numIslands(boolean[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0) {
            return 0;
        }


        int row = grid.length, column = grid[0].length;
        int islands = 0;
        boolean visited[][] = new boolean[row][column];

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                if (grid[i][j] == false) {
                    continue;
                }
                if(grid[i][j] == true && !visited[i][j]) {
                    bfs(visited, i, j, grid);
                    islands++;
                }
            }
        }
        return islands;
    }


    private void bfs(boolean[][] visited, int i, int j, boolean[][] grid) {
        int[] deltaX = {0, 0, -1, 1};
        int[] deltaY = {1, -1, 0, 0};

       Queue<Coordinate> queue = new LinkedList<Coordinate>();
       queue.offer(new Coordinate(i, j));
       visited[i][j] = true;
       while (!queue.isEmpty()) {
         Coordinate current = queue.poll();
          for (int direction = 0; direction < 4; direction++) {
              int newX = current.x + deltaX[direction];
              int newY = current.y + deltaY[direction];

              if (!isValid(grid, newX, newY, visited)) {
                 continue;
              }
              visited[newX][newY] = true;
              queue.offer(new Coordinate(newX, newY));
          }
       }
    }

    private boolean isValid(boolean[][] grid, int newX, int newY, boolean[][] visited) {
        int row = grid.length, column = grid[0].length;
        if (newX < 0 || newX >= row || newY < 0 || newY >= column) {
            return false;
        }
        if (visited[newX][newY]) {
            return false;
        }
        return grid[newX][newY];
    }

}
