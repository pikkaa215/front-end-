Description
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

public class Solution {
    /**
     * @param a: an integer rotated sorted array
     * @param target: an integer to be searched
     * @return: an integer
     */
    public int search(int[] a, int target) {
        // write your code here
        if (a.length == 0 || a == null) {
            return -1;
        }

        int start = 0, end = a.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            //in the upper line
            if (a[mid] > a[end]) {
               if (a[start] <= target && target <= a[mid]) {
                   end = mid;
               } else {
                   start = mid;
               }
            } else {
                if (a[mid] <= target && target <= a[end]) {
                     start = mid;
                } else {
                    end = mid;
                }
            }
        }
        if (a[start] == target) {
            return start;
        }
        if (a[end] == target) {
            return end;
        }
        return -1;
    }
}
