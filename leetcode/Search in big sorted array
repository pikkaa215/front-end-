Given a big sorted array with non-negative integers sorted by non-decreasing order. The array is so big so that you can not get the length of the whole array directly, and you can only access the kth number by ArrayReader.get(k) (or ArrayReader->get(k) for C++).

Find the first index of a target number. Your algorithm should be in O(log k), where k is the first index of the target number.

Return -1, if the number doesn't exist in the array.

public class Solution {
    /**
     * @param reader: An instance of ArrayReader.
     * @param target: An integer
     * @return: An integer which is the first index of target.
     */
    public int searchBigSortedArray(ArrayReader reader, int target) {
        // write your code here
     int range = 1;
     while (reader.get(range - 1) < target) { //注意要-1
       range = range * 2;
     }

     int start = range / 2, end = range - 1;
     while (start + 1 < end) {
         int mid = start + (end - start) / 2;
         if (target > reader.get(mid)) {
             start = mid;
         } else {
             end = mid; ／／返回的是第一次出现的值
         }
     }
     if (target == reader.get(start)) {
         return start;
     } 

     if (target == reader.get(end)) {
         return end;
     }
     return -1;
    }
}
