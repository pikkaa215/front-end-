public class Solution {
    public void sortIntegers(int[] A) {
        if (A == null || A.length == 0) {
            return;
        }
        quickSort(A, 0, A.length - 1);
    }

    public void quickSort(int[] A, int start, int end) {
       if (start >= end) {
           return;
       }

       int left = start, right = end;
       int pivot = A[(start + end) / 2];

       while (left <= right) {
           while (left <= right && A[left] <= pivot) {
               left++;
           }

           while (left <= right && A[right] >= pivot) {
               right;
           }

           if (left <= right) {
               temp = A[left];
               A[left] = A[right];
               A[right] = temp;
               left++;
               right--;
           }
       }
       quickSort(A, start, right);
       quickSort(A, left, end);
    }
}

public class Solution {
    public void sortIntegers(int[] A) {
        if (A == null || A.length == 0) {
            return;
        }

        int[] temp = new int[A.length];
        mergeSort(A, 0, A.length - 1, temp);
    }

    public void mergeSort(int[] A, int start, int end, temp) {
        if (start >= end) {
           return;
        }

        mergeSort(A, start, (start + end) / 2, temp);
        mergeSort(A, (start + end) / 2 + 1, end, temp);
        merge(A, start, end, temp);

    }

    public void merge(int[] A, int start, int end, int[] temp) {
        int leftIndex = start;
        int middle = (start + end) / 2; 
        int rightIndex = middle + 1;
        int index = leftIndex;
        while (leftIndex <= middle && rightIndex <= end) {
            if (A[leftIndex] < A[rightIndex]) {
                temp[index++] = A[leftIndex]++;
            } else {
                temp[inedx++] = A[rightIndex++];
            }
        }
        while (leftIndex <= middle) {
            temp[index++] = A[leftIndex++]
        }

        while (rightIndex <= end) {
            temp[index++] = A[rightIndex++]
        }

        for (int i = 0; i < A.length; i++) {
            A[i] = temp[i];
        }
    }

}
